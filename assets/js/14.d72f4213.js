(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{532:function(t,a,e){"use strict";e.r(a);var r=e(4),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"一、函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、函数"}},[t._v("#")]),t._v(" 一、函数")]),t._v(" "),e("h2",{attrs:{id:"_1-概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[t._v("#")]),t._v(" 1.概念")]),t._v(" "),e("p",[t._v("函数就是把特定功能的代码抽取出并进行封装，用来重复执行一些功能。")]),t._v(" "),e("h2",{attrs:{id:"_2-优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-优点"}},[t._v("#")]),t._v(" 2.优点")]),t._v(" "),e("p",[t._v("函数可以重复执行某一部分代码（通过函数名调用）；")]),t._v(" "),e("p",[t._v("使程序变得更简短而清晰；")]),t._v(" "),e("p",[t._v("有利于程序维护；")]),t._v(" "),e("h2",{attrs:{id:"_3-创建方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建方式"}},[t._v("#")]),t._v(" 3.创建方式")]),t._v(" "),e("h4",{attrs:{id:"a-关键字声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-关键字声明"}},[t._v("#")]),t._v(" a.关键字声明")]),t._v(" "),e("p",[t._v("​\tfunction 函数名(形参){执行的功能代码}")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"b-赋值式声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-赋值式声明"}},[t._v("#")]),t._v(" b.赋值式声明")]),t._v(" "),e("p",[t._v("​\tvar 函数名=function(形参){执行的功能代码}")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h4",{attrs:{id:"c-构造函数法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-构造函数法"}},[t._v("#")]),t._v(" c.构造函数法")]),t._v(" "),e("p",[t._v("​\t var 函数名=new Function();不推荐使用")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fn "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"_4-分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-分类"}},[t._v("#")]),t._v(" 4.分类")]),t._v(" "),e("p",[t._v("1\t内置函数")]),t._v(" "),e("p",[t._v("2\t自定义函数")]),t._v(" "),e("p",[t._v("3\t匿名函数")]),t._v(" "),e("p",[t._v("function(形参){执行的功能代码}")]),t._v(" "),e("h2",{attrs:{id:"_5-函数的执行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-函数的执行"}},[t._v("#")]),t._v(" 5.函数的执行")]),t._v(" "),e("p",[t._v("1\t主动执行：")]),t._v(" "),e("p",[t._v("​\t函数名()")]),t._v(" "),e("p",[t._v("2\t事件驱动：")]),t._v(" "),e("p",[t._v("​\tele.onclick=函数名;")]),t._v(" "),e("p",[t._v("​\tele.onclick=function(){}")]),t._v(" "),e("h2",{attrs:{id:"_6-作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-作用域"}},[t._v("#")]),t._v(" 6.作用域")]),t._v(" "),e("p",[t._v("（一）分类")]),t._v(" "),e("h3",{attrs:{id:"_1全局作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1全局作用域"}},[t._v("#")]),t._v(" 1\t全局作用域")]),t._v(" "),e("p",[t._v("全局变量：在函数外定义的变量称为全局变量")]),t._v(" "),e("h3",{attrs:{id:"_2局部作用域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2局部作用域"}},[t._v("#")]),t._v(" 2\t局部作用域")]),t._v(" "),e("p",[t._v("局部变量：在函数内定义的变量")]),t._v(" "),e("h3",{attrs:{id:"_3变量的访问规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3变量的访问规则"}},[t._v("#")]),t._v(" 3\t变量的访问规则")]),t._v(" "),e("p",[t._v("​\t(1)\t若在某个函数内部使用一个变量，那么先查找该函数内是否有变量声明；")]),t._v(" "),e("p",[t._v("​\t(2)\t如果当前函数无变量a，则往父级函数查找，如果找到则使用，并停止查找；")]),t._v(" "),e("p",[t._v("​\t(3)\t如果在父级函数还是无法找到，则继续往上一层函数查找，以此类推；")]),t._v(" "),e("p",[t._v("​\t(4)\t直到最顶层(全局作用域)，如果还是没找到，则报错误** is not defined；")]),t._v(" "),e("p",[t._v("在函数内若没有通过var 声明变量，相当于在全局作用域用var 声明了该变量")]),t._v(" "),e("h3",{attrs:{id:"_4作用域链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4作用域链"}},[t._v("#")]),t._v(" 4\t作用域链")]),t._v(" "),e("p",[t._v("​\t当函数访问变量时，根据就近原则从内到外查询变量，这个路径称为作用域链;")]),t._v(" "),e("h2",{attrs:{id:"_7-函数的实参与形参"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-函数的实参与形参"}},[t._v("#")]),t._v(" 7.函数的实参与形参")]),t._v(" "),e("p",[t._v("1\t形参：函数定义时的参数（变量）")]),t._v(" "),e("p",[t._v("2\t实参：函数执行时的参数（值）")]),t._v(" "),e("p",[t._v("形参与实参个数可以不一致")]),t._v(" "),e("p",[t._v("函数内部隐藏的对象（是一个类数组），保存着实参的信息")]),t._v(" "),e("p",[t._v("一、声明提前")]),t._v(" "),e("p",[t._v("概念：代码从上往下顺序执行之前，会将所有的声明提升到当前作用域的最顶端，之后顺序执行")]),t._v(" "),e("p",[t._v("在变量赋值之前使用变量，变量的值为undefined")]),t._v(" "),e("p",[t._v("用赋值式声明函数，若在声明之前调用函数，会报错，** is not  a function；")]),t._v(" "),e("p",[t._v("用关键字声明函数，可以在声明之前调用函数")]),t._v(" "),e("h2",{attrs:{id:"基本数据类型与引用数据类型的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型与引用数据类型的区别"}},[t._v("#")]),t._v(" 基本数据类型与引用数据类型的区别")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("基本数据类型放在栈中,引用数据类型放在堆中\n")])])]),e("h3",{attrs:{id:"①-案例："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#①-案例："}},[t._v("#")]),t._v(" ①　案例：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var a=10;\nvar b=a;\nb++;\nconsole.log(a,b);//10,11\n\nvar arr=[1,2,3];\nvar brr=arr;\nbrr[1]=20;\nconsole.log(arr===brr);//true\n")])])]),e("h3",{attrs:{id:"②-数据类型作为函数的参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#②-数据类型作为函数的参数"}},[t._v("#")]),t._v(" ②　数据类型作为函数的参数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//基本数据类型,传递的是值\nfunction numAdd(num){\n    num++;\n    console.log(num);//11\n}\n\nvar a=10;\nnumAdd(a);\nconsole.log(a);//10\n\n//引用数据类型,传递的是地址\nfunction numAdd(arr){\n    arr[0]=10;\n    console.log(arr);//[10,2]\n}\n\nvar arr1=[1,2];\nnumAdd(arr1);\nconsole.log(arr1);//10,2\n")])])]),e("h2",{attrs:{id:"函数的返回值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数的返回值"}},[t._v("#")]),t._v(" 函数的返回值")]),t._v(" "),e("p",[t._v("1\t概念：通过return将函数内部的值返回到函数外，函数外若要使用，必须接收。")]),t._v(" "),e("p",[t._v("2\t如果函数没有return，执行完后返回undefined")]),t._v(" "),e("p",[t._v("3\treturn 后面的代码不会被执行")]),t._v(" "),e("h2",{attrs:{id:"this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),e("p",[t._v("1\t表示当前对象，取决于谁调用了这个函数")]),t._v(" "),e("p",[t._v("2\t直接执行，this 为window；事件驱动，this为绑定的元素。")]),t._v(" "),e("h2",{attrs:{id:"递归"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[t._v("#")]),t._v(" 递归")]),t._v(" "),e("p",[t._v("（自己调用自己）")]),t._v(" "),e("p",[t._v("1\t容易出现死循环")]),t._v(" "),e("p",[t._v("2\t递归避免死循环，设置好临界点return")]),t._v(" "),e("h2",{attrs:{id:"回调函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回调函数"}},[t._v("#")]),t._v(" 回调函数")]),t._v(" "),e("p",[t._v("（函数作为参数传递）")]),t._v(" "),e("h1",{attrs:{id:"二、数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、数组"}},[t._v("#")]),t._v(" 二、数组")]),t._v(" "),e("h2",{attrs:{id:"概念："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念："}},[t._v("#")]),t._v(" 概念：")]),t._v(" "),e("p",[t._v("一系列数据的集合，每一项（数组的元素）可以保存任何类型的数据，每个元素之间用逗号隔开\n2.数组的声明\n(1）字面量 var arr = [1,2,3];\n(2）构造函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var arr = new Array(3); 创建长度为3的数组\nvar arr = new Array("aa","bb","cc");  创建数组及定义好每一项的值\n')])])]),e("p",[t._v("3.数组的操作(增删改查)")]),t._v(" "),e("p",[t._v("数组的索引:arr[索引]，索引从0开始计数")]),t._v(" "),e("p",[t._v("数组的长度:arr.length\n数组的遍历：遍历索引从0-arr.length-1，通过arr[索引]拿到每一项的值")]),t._v(" "),e("h2",{attrs:{id:"方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),e("h3",{attrs:{id:"_1-增删改"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-增删改"}},[t._v("#")]),t._v(" 1. 增删改")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(1)增删改方法,改变原数组,返回值为长度或改变项\n\tpush() ： 往最后添加项\n\tpop() ： 删除最后项\n\tunshift() ： 往前添加项\n\tshift() ： 删除最前项\n\tsplice(startIdx,num,item) : 增、删、换\n\treverse() : 数组倒序\n")])])]),e("h3",{attrs:{id:"_2-传递与复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-传递与复制"}},[t._v("#")]),t._v(" 2. 传递与复制")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("(2)传递、复制方法,不改变原数组\n\tslice(startIdx,endIdx) : 截取数组\n\tjoin('拼接符') ： 数组拼接为字符串,默认逗号拼接\n\tconcat(数组1,数组2,...) ： 合并数组,返回调用方法的新数组\n")])])]),e("h2",{attrs:{id:"数组的排序算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组的排序算法"}},[t._v("#")]),t._v(" 数组的排序算法")]),t._v(" "),e("h3",{attrs:{id:"_1-冒泡排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-冒泡排序"}},[t._v("#")]),t._v(" 1.冒泡排序")]),t._v(" "),e("p",[t._v("​\t外层遍历的是轮数\n​\t内层是每一轮，遍历当前索引，与索引+1进行比较换位置。每一轮将一个最大的数排在最后")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr=[];\n\t\tfor(var i=0;i<7;i++){\n\t\t\tarr.push(parseInt(Math.random()*100));\n\t\t}\n\t\tconsole.log(arr);\n\t\tfor(var i=0;i<arr.length-1;i++){\n\t\t\tfor(var j=0;j<arr.length-i;j++){\n\t\t\t\tif(arr[j]>arr[j+1]){\n\t\t\t\t\tvar box=arr[j];\n\t\t\t\t\tarr[j]=arr[j+1];\n\t\t\t\t\tarr[j+1]=box;\n\t\t\t\t}\n\t\t\t\tconsole.log(666);\n\t\t\t}\n\t\t}\n\t\tconsole.log(arr);\n")])])]),e("h3",{attrs:{id:"_2-选择排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-选择排序"}},[t._v("#")]),t._v(" 2.选择排序")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("固定被比较的索引，与后面的每个索引对应的值进行比较")])]),t._v(" "),e("li",[e("p",[t._v("外层循环是固定的被比较的索引i：0-arr.length-2")])]),t._v(" "),e("li",[e("p",[t._v("内层循环是比较i的索引j，从i+1到arr.length进行遍历")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr = [12,3,44,343,55,1,23];\nfor(var i=0;i<arr.length-1;i++){\n\tfor(var j=i+1;j<arr.length;j++){\n\t\tif(arr[i]>arr[j]){\n\t\t\tvar item = arr[i];\n\t\t\tarr[i] = arr[j];\n\t\t\tarr[j] = item;\n\t\t}\n\t\tconsole.log(666);\n\t}\n}\nconsole.log(arr);\n")])])])])]),t._v(" "),e("h3",{attrs:{id:"_3-快速排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-快速排序"}},[t._v("#")]),t._v(" 3.快速排序")]),t._v(" "),e("p",[t._v("（递归）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr=[1,9,2,23,10,55,33];\nfastSort(arr);\nfunction fastSort(arr){\n\tif(arr.length<=1){\n\t\treturn arr;\n\t}\n\tvar midIdx=parseInt(arr.length/2);\n\tvar midNum=arr.splice(midIdx,1)[0];\n\tvar ltArr=[];\n\tvar gtArr=[];\n\tfor(var i=0;i<arr.length;i++){\n\t\tif(arr[i]<=midNum){\n\t\t\tltArr.push(arr[i]);\n\t\t}else if(arr[i]>midNum){\n\t\t\tgtArr.push(arr[i]);\n\t\t}\n\t}\n\treturn fastSort(ltArr).concat([midNum],fastSort(gtArr));\n}\nconsole.log(fastSort(arr));\n")])])]),e("h3",{attrs:{id:"_4-sort-排序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-sort-排序"}},[t._v("#")]),t._v(" 4.sort()排序")]),t._v(" "),e("p",[t._v("arr.sort() 将原数组中的元素排序，并返回排序后的数组")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("默认以字符串的排列方式（转换成ASCII码进行对比)")])]),t._v(" "),e("li",[e("p",[t._v("sort(function(a,b){return a-b;}) 从小到大排序")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v(" var res = arr.sort(function(a,b){\n \t// return值>0 a,b互换\n \t// return值<=0 不动\n \treturn a-b;\n });\n console.log(arr,res);\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"数组的传递与复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组的传递与复制"}},[t._v("#")]),t._v(" 数组的传递与复制")]),t._v(" "),e("h3",{attrs:{id:"_1-传递"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-传递"}},[t._v("#")]),t._v(" 1.传递")]),t._v(" "),e("ul",[e("li",[t._v("基本数据类型中，传递的是值(数字,字符串,布尔类型,null,undefined)")]),t._v(" "),e("li",[t._v("引用数据类型中，传递的是在堆中的地址(数组,对象)")])]),t._v(" "),e("h3",{attrs:{id:"_2-复制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-复制"}},[t._v("#")]),t._v(" 2.复制")]),t._v(" "),e("p",[t._v("基本数据类型：改变复制的值，不影响原值")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var a = 10;\nvar b = a;//var b = 10\nb = 30;\nconsole.log(a,b);//10,30\n")])])]),e("p",[t._v("引用数据类型：改变复制的值，会影响原值（浅复制）")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr = [10,20,30];\nvar brr = arr;\nbrr[0] = 66;\nconsole.log(arr,brr);//[66,20,30][66,20,30]\n")])])]),e("p",[t._v("引用数据类型：改变复制的值，不影响原值（深复制）")]),t._v(" "),e("ul",[e("li",[t._v("for循环拷贝数组的每一项(不适用多维数组)")]),t._v(" "),e("li",[t._v("slice(0)")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr = [10,20,30];\n// var res = [];\n// for(var i=0;i<arr.length;i++){\n// \tres.push(arr[i]);\n// }\n// console.log(res);//10,20,30\n// res[0] = 40;\n// console.log(arr,res);\n//=======================================\nvar res = arr.slice(0);\nres[0] = 40;\nconsole.log(arr,res);\n")])])]),e("h2",{attrs:{id:"多维数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多维数组"}},[t._v("#")]),t._v(" 多维数组")]),t._v(" "),e("p",[t._v("数组嵌套数组")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// var arr = [["hzh","hyd"],["lm","jh"],["xw","rw"],["lz","zlh"],["hhm","dz"]];\nvar arr = [];\nvar brr = [];\nvar n = 0;\nfor(var i=1;i<=25;i++){\n\tbrr.push(i);\n\tn++;\n\tif(n % 5==0){\n\t\tarr.push(brr);\n\t\tbrr = [];\n\t}\n}\nconsole.log(arr);\n')])])]),e("h1",{attrs:{id:"三、对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、对象"}},[t._v("#")]),t._v(" 三、对象")]),t._v(" "),e("h2",{attrs:{id:"创建对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建对象"}},[t._v("#")]),t._v(" 创建对象")]),t._v(" "),e("p",[t._v("1.字面量")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var obj = {\n\tname : "xiaofang",\n\tage : 17,\n\thobby : "学习"\n}\n')])])]),e("p",[t._v("2.构造函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var obj1 = new Object();\n")])])]),e("h2",{attrs:{id:"对象的操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象的操作"}},[t._v("#")]),t._v(" 对象的操作")]),t._v(" "),e("p",[t._v("操作对象键对应的值")]),t._v(" "),e("p",[t._v("obj.键")]),t._v(" "),e("p",[t._v('obj["具题的键"] obj[变量]\n对象的遍历')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" for(var key in obj){\n\tkey代表键;\n\tobj[key]获取每个键对应的值\n}\n")])])]),e("p",[t._v("对于单个键值对而言，键是变量，值就是值")]),t._v(" "),e("p",[t._v("对于整个对象而言，对象是变量，键是具体的属性")]),t._v(" "),e("h3",{attrs:{id:"_1-添加、修改属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加、修改属性"}},[t._v("#")]),t._v(" (1)添加、修改属性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("obj.sex = '男';\nobj['weight'] = 60；\n")])])]),e("h3",{attrs:{id:"_2-删除属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-删除属性"}},[t._v("#")]),t._v(" (2)删除属性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var obj = {name:'laoxie',age:18,gender:'man'}\n//删除age属性\ndelete obj.age;\n")])])]),e("h3",{attrs:{id:"_3-读取属性值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-读取属性值"}},[t._v("#")]),t._v(" (3)读取属性值")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("obj.name;//==>小明\n//如果读取一个不存在的属性，返回undefined\n")])])]),e("h3",{attrs:{id:"_4-遍历对象for…in"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-遍历对象for…in"}},[t._v("#")]),t._v(" (4)遍历对象for…in")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    var obj = {name:'laoxie'，age:18，gender:'男'}；  \n    for(var key in obj){\n        //遍历obj对象里面所有的键key,Obj[key]操作所有键对应的值。\n        document.write(obj[key]);//分别输出：'laoxie',18,'男'\n    }\n")])])]),e("h3",{attrs:{id:"数组与对象的组合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组与对象的组合"}},[t._v("#")]),t._v(" 数组与对象的组合")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" [{\n        id:'001',\n        name:'iphone7 plugs',\n        nickname:'肾7',\n        imgurl:'img/ip7.jpg',\n        price:5899.00,\n        sale:5888.00,\n        color:'土豪金'\n    },{\n        id:'002',\n        name:'Note7',\n        nickname:'爆炸7',\n        imgurl:'img/note7.jpg',\n        price:3899.00,\n        sale:998.00,\n        color:'黑色'\n    },{\n        id:'003',\n        name:'荣耀7',\n        nickname:'牛x7',\n        imgurl:'img/honor7.jpg',\n        price:1999.00,\n        sale:1899.00,\n        color:'白色'\n    }]\n")])])]),e("h1",{attrs:{id:"四、es5数组新增方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、es5数组新增方法"}},[t._v("#")]),t._v(" 四、ES5数组新增方法")]),t._v(" "),e("h2",{attrs:{id:"迭代（遍历）方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迭代（遍历）方法"}},[t._v("#")]),t._v(" 迭代（遍历）方法")]),t._v(" "),e("h3",{attrs:{id:"_1-foreach"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-foreach"}},[t._v("#")]),t._v(" 1. forEach()")]),t._v(" "),e("p",[t._v("forEach(function(item,idx,arr){})  遍历数组，与for循环没有太大差别，比for循环方便")]),t._v(" "),e("ul",[e("li",[t._v("item代表数组中的每一项")]),t._v(" "),e("li",[t._v("idx代表索引")]),t._v(" "),e("li",[t._v("arr代表当前数组")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr = [777,10,44,66];\nfor(var i=0;i<arr.length;i++){\n\tconsole.log(arr[i]);\n}\narr.forEach(function(item,idx,arr){\n\tconsole.log(item,idx,arr);\n})\n")])])]),e("h3",{attrs:{id:"_2-map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-map"}},[t._v("#")]),t._v(" 2.map()")]),t._v(" "),e("p",[t._v("map(function(item,idx,arr){return ;})  返回一个数量相等的数组，内容是什么取决于在fn中的返回值")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr = [777,10,44,66];\nvar res = arr.map(function(item,idx,arr){\n\t\t\tconsole.log(item);\n\t\t\treturn item*2;\n\t\t})\n\t\tconsole.log(res);\n")])])]),e("h3",{attrs:{id:"_3-filter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-filter"}},[t._v("#")]),t._v(" 3.filter()")]),t._v(" "),e("p",[t._v("filter(function(item,idx,arr){}) 返回一个数组，存放执行fn后返回true的数组元素(过滤)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr = [777,10,44,66];\nvar res = arr.filter(function(item,idx,arr){\n\t\t\treturn item>55;\n\t\t})\n\t\tconsole.log(res);\n")])])]),e("h3",{attrs:{id:"_4-some"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-some"}},[t._v("#")]),t._v(" 4.some()")]),t._v(" "),e("p",[t._v("some(function(item,idx,arr){}) 返回布尔值，如果fn对数组任何一项返回 true，则返回true。")]),t._v(" "),e("p",[t._v("查找数组中是否有满足条件的项。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr = [777,10,44,66];\nvar res = arr.some(function(item,idx,arr){\n\t\t\tconsole.log(idx);//0\n\t\t\treturn item>666;//777>666直到找到true就不再遍历\n\t\t})\n")])])]),e("h3",{attrs:{id:"_5-every"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-every"}},[t._v("#")]),t._v(" 5.every()")]),t._v(" "),e("p",[t._v("every(function(item,idx,arr){}) 返回布尔值，若fn对数组中有一项返回false，则返回false")]),t._v(" "),e("p",[t._v("检查数组所有项，是否都满足条件，是则返回true，否则返回false。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr = [777,10,44,66];\nvar res = arr.every(function(item,idx,arr){\n\t\t\treturn item>666;\n\t\t})\n\t\tconsole.log(res);\n")])])]),e("h2",{attrs:{id:"归并方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#归并方法"}},[t._v("#")]),t._v(" 归并方法")]),t._v(" "),e("h3",{attrs:{id:"reduce-fn-initval"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reduce-fn-initval"}},[t._v("#")]),t._v(" reduce(fn,initVal)")]),t._v(" "),e("p",[t._v("fn(prev,current,idx,arr)")]),t._v(" "),e("ul",[e("li",[t._v("prev: fn上一次执行的返回值，第一次为initVal，若initVal没有定义，为数组的第一个元素值")]),t._v(" "),e("li",[t._v("current: 当前索引对应的值")]),t._v(" "),e("li",[t._v("idx: 当前索引")]),t._v(" "),e("li",[t._v("arr: 数组")])]),t._v(" "),e("p",[t._v("应用： 数组求和")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//对数组求和\nvar res = arr.reduce(function(prev,current,idx,arr){\n\treturn prev+current;\n},0);\n")])])]),e("h3",{attrs:{id:"reduceright-fn-initval"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reduceright-fn-initval"}},[t._v("#")]),t._v(" reduceRight(fn,initVal)")]),t._v(" "),e("ul",[e("li",[t._v("fn(prev,cur,index,array): fn是每一项调用的函数，函数接受4个参数分别是\n"),e("ul",[e("li",[t._v("prev：函数上一次的返回值。（第一次的值参考initVal）")]),t._v(" "),e("li",[t._v("cur：当前值，")]),t._v(" "),e("li",[t._v("index：索引值，")]),t._v(" "),e("li",[t._v("array：当前数组，")])])]),t._v(" "),e("li",[t._v("函数需要返回一个值，这个值会在下一次迭代中作为prev的值")]),t._v(" "),e("li",[t._v("initVal: 迭代初始值（可省略），如果缺省，prev的值为数组第一项")])]),t._v(" "),e("h2",{attrs:{id:"静态方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),e("p",[t._v("只能由构造函数自己去调用")]),t._v(" "),e("h3",{attrs:{id:"array-isarray"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array-isarray"}},[t._v("#")]),t._v(" Array.isArray()")]),t._v(" "),e("p",[t._v("Array.isArray() 判断是否为数组，返回布尔值")]),t._v(" "),e("h2",{attrs:{id:"索引方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引方法"}},[t._v("#")]),t._v(" 索引方法")]),t._v(" "),e("h3",{attrs:{id:"indexof-lastindexof-a-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#indexof-lastindexof-a-3"}},[t._v("#")]),t._v(' indexOf/lastIndexOf("a",3)')]),t._v(" "),e("p",[t._v("indexOf(keyword[,startIdx]) 返回keyword所在数组中的索引值；")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("如果数组不存在keyword，则返回-1")])]),t._v(" "),e("li",[e("p",[t._v("startIdx 规定开始查找的索引值")])]),t._v(" "),e("li",[e("p",[t._v("应用：判断数组中是否存在某个值")])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr=[10,20,50,40,50]\nconsole.log(arr.indexOf(50))\n//2\nconsole.log(arr.indexOf(50,3))\n//4\n")])])]),e("h1",{attrs:{id:"五、字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、字符串"}},[t._v("#")]),t._v(" 五、字符串")]),t._v(" "),e("p",[t._v("1.定义：字符串就是一串字符，由双（单）引号括起来")]),t._v(" "),e("p",[t._v("2.创建字符串")]),t._v(" "),e("p",[t._v('​\t字面量 var str="hello"')]),t._v(" "),e("p",[t._v('​\t构造函数 var str=new String("hello");')]),t._v(" "),e("p",[t._v("3.字符串的操作")]),t._v(" "),e("p",[t._v("​\t字符串的长度 str.length")]),t._v(" "),e("p",[t._v("​\t字符串的索引 str[索引]   ==>es5")]),t._v(" "),e("p",[t._v("​\tstr.charAt(索引)")]),t._v(" "),e("p",[t._v("4.字符串的方法")]),t._v(" "),e("p",[t._v("（1）split(分隔符)，将字符串根据分隔符，拆分成数组。原字符串不变")]),t._v(" "),e("p",[t._v("（2）replace(需要被替换的字符，替换后的字符)，字符串的替换方法。原字符串不变")]),t._v(" "),e("p",[t._v("（3）slice(start[,end])字符串的截取方法，截取start到end，不包括end的字符串，支持负数")]),t._v(" "),e("p",[t._v("substring(start[,end]) 与slice 一样，但不支持负数")]),t._v(" "),e("p",[t._v("substr(start[,len]) 支持负数，len为截取的数量")]),t._v(" "),e("p",[t._v("（4）字符串大小写转换")]),t._v(" "),e("p",[t._v("toLowerCase()  转换成小写")]),t._v(" "),e("p",[t._v("toUpperCase()  转换成大写")]),t._v(" "),e("p",[t._v("（5）trim() 删除前后所有空格，返回新的字符串(es5)")]),t._v(" "),e("p",[t._v("5.字符与字符编码")]),t._v(" "),e("h1",{attrs:{id:"六、正则表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六、正则表达式"}},[t._v("#")]),t._v(" 六、正则表达式")]),t._v(" "),e("p",[t._v("1.字面量创建")]),t._v(" "),e("p",[t._v("/字符串/")]),t._v(" "),e("p",[t._v("例如：var reg = /傻逼/")]),t._v(" "),e("p",[t._v("​\tg 全局匹配")]),t._v(" "),e("p",[t._v("​\ti 不区分大小写")]),t._v(" "),e("p",[t._v("2.构造函数创建")]),t._v(" "),e("p",[t._v('​\tnew RegExp("字符串","gi")')]),t._v(" "),e("p",[t._v('​\tnew RegExp(变量,"gi")')]),t._v(" "),e("h1",{attrs:{id:"七、math"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七、math"}},[t._v("#")]),t._v(" 七、Math")]),t._v(" "),e("p",[t._v("1.概念：一个保存数学公式和信息的对象")]),t._v(" "),e("p",[t._v("2.属性：")]),t._v(" "),e("p",[t._v("Math.PI\t\tπ  3.1415926....")]),t._v(" "),e("p",[t._v("3.方法：")]),t._v(" "),e("p",[t._v("Math.random()  //返回0-1之间的随机数（不包括1）")]),t._v(" "),e("p",[t._v("Math.round()  //四舍五入")]),t._v(" "),e("p",[t._v("Math.ceil()  //向上取整")]),t._v(" "),e("p",[t._v("Math.floor()  //向下取整")]),t._v(" "),e("p",[t._v("Math.max(num1,num2,...) //最大的数")]),t._v(" "),e("p",[t._v("Math.min(num1,num2,...) //最小的数")]),t._v(" "),e("p",[t._v("Math.abs() //绝对值")]),t._v(" "),e("p",[t._v("Math.pow(x,y)  //x的y次方")]),t._v(" "),e("h1",{attrs:{id:"八、date"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八、date"}},[t._v("#")]),t._v(" 八、Date")]),t._v(" "),e("h2",{attrs:{id:"创建日期时间对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建日期时间对象"}},[t._v("#")]),t._v(" 创建日期时间对象")]),t._v(" "),e("p",[t._v("构造函数 new Date();")]),t._v(" "),e("p",[t._v("不带参数，得到的是代码执行时的时间（本地时间）")]),t._v(" "),e("p",[t._v("带参数：字符串，指定日期；数字，指定毫秒数（距离纪元时间的毫秒数）。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var d=new Date();//代码运行时的本地时间\nvar d=new Date("2017/10/10 12:00:00");\nvar d=new Date(2000); //距离纪元时间的毫秒数\n')])])]),e("h2",{attrs:{id:"时间日期对象的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#时间日期对象的方法"}},[t._v("#")]),t._v(" 时间日期对象的方法")]),t._v(" "),e("p",[t._v("1.获取方法")]),t._v(" "),e("p",[t._v("获取年月日")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var d=new Date();\nvar year=d.getFullYear();//2019\nvar month=d.getMonth(); //月份0-11，得到的月份记得+1才是真实月份;\nvar date=d.getDate()\n")])])]),e("p",[t._v("获取星期")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var d=new Date();\nvar day=d.getDay();  //0-6:星期天-星期六\n")])])]),e("p",[t._v("获取时分秒")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var d=new Date();\nvar hour=d.getHours();\nvar minute=d.getMinutes();\nvar second=d.getSeconds();\n")])])]),e("p",[t._v("date.getTime();获取距离纪元时间的毫秒数")]),t._v(" "),e("h2",{attrs:{id:"静态方法-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态方法-2"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),e("p",[t._v("Date.parse(“2015-08-24”)//返回指定日期距1970-1-1零时的毫秒数")]),t._v(" "),e("blockquote",[e("p",[t._v("PS：转换格式默认支持2015-08-24或2015/08/24")])]),t._v(" "),e("p",[t._v("Date.now();//返回执行这行代码时距1970-1-1零时的毫秒数")]),t._v(" "),e("h2",{attrs:{id:"定时器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定时器"}},[t._v("#")]),t._v(" 定时器")]),t._v(" "),e("p",[t._v("1.var timer=setInterval(function(){},毫秒数)；每隔多少毫秒执行一次函数")]),t._v(" "),e("p",[t._v("2.setTimeout(function(){},毫秒数)；延迟多少毫秒执行函数，只执行一次")]),t._v(" "),e("p",[t._v("3.clearInterval(timer)；清除指定id标识的定时器操作")]),t._v(" "),e("p",[t._v("4.clearTimeout(timer)；清除指定id标识的延迟操作")]),t._v(" "),e("h1",{attrs:{id:"九、bom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#九、bom"}},[t._v("#")]),t._v(" 九、BOM")]),t._v(" "),e("h2",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),e("p",[t._v("BOM 是Browser Object Model（浏览器对象模型）的缩写，提供与浏览器窗口进行交互的对象。JavaScript语法的标准化组织是ECMA，DOM的标准化组织是W3C, 而BOM缺乏标准。这也是各种浏览器不兼容的根源所在；")]),t._v(" "),e("p",[t._v("1.window对象")]),t._v(" "),e("p",[t._v("window对象是BOM的核心, 是最顶层的对象，所有对象都是通过它延伸出来的")]),t._v(" "),e("p",[t._v("2.全局作用域下定义的变量都是window对象的属性；")]),t._v(" "),e("p",[t._v("尽量避免声明全局变量，减少命名冲突，避免全局污染；")]),t._v(" "),e("p",[t._v("在函数内部不用var声明的变量会成为全局变量，即window对象的属性")]),t._v(" "),e("p",[t._v("window对象可以在代码中省略，如window.alert()可以写成alert();")]),t._v(" "),e("p",[t._v("delete不能删除全局变量；")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var obj = {name:'xxx'}\n\n//删除对象的属性用delete：\ndelete obj.name;\n")])])]),e("h2",{attrs:{id:"window对象下的属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#window对象下的属性"}},[t._v("#")]),t._v(" window对象下的属性")]),t._v(" "),e("p",[t._v("1.浏览器窗口尺寸")]),t._v(" "),e("p",[t._v("innerWidth/innerHeight, //表示浏览器窗口”可视区域”尺寸")]),t._v(" "),e("p",[t._v("outerWidth/outerHeight //表示整个浏览器窗口的尺寸")]),t._v(" "),e("p",[t._v("2.滚动相关")]),t._v(" "),e("ul",[e("li",[t._v("scrollX/scrollY //获取浏览器窗口滚动条滚动过的距离")]),t._v(" "),e("li",[t._v("scrollTo(x,y) //设置浏览器滚动距离")]),t._v(" "),e("li",[t._v("scrollBy(xnum,ynum) //设置基于当前位置滚动的距离，可以为负数")])]),t._v(" "),e("h2",{attrs:{id:"window的常用事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#window的常用事件"}},[t._v("#")]),t._v(" window的常用事件")]),t._v(" "),e("ul",[e("li",[t._v('onload //页面资源全部加载完成后触发这个事件（开发中不常用）（document.addEventListener("DOMContentLoaded",function(){})）')]),t._v(" "),e("li",[t._v("onscroll//窗口滚动条滚动时触发")]),t._v(" "),e("li",[t._v("onresize //窗口大小改变时触发")])]),t._v(" "),e("h2",{attrs:{id:"系统弹窗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#系统弹窗"}},[t._v("#")]),t._v(" 系统弹窗")]),t._v(" "),e("h3",{attrs:{id:"_1-alert-msg"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-alert-msg"}},[t._v("#")]),t._v(" 1.alert(msg)")]),t._v(" "),e("p",[t._v("//弹出对话框")]),t._v(" "),e("h3",{attrs:{id:"_2-confirm-msg"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-confirm-msg"}},[t._v("#")]),t._v(" 2.confirm(msg)")]),t._v(" "),e("p",[t._v("//弹出警告弹窗，返回布尔值")]),t._v(" "),e("h3",{attrs:{id:"_3-prompt-msg-default"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-prompt-msg-default"}},[t._v("#")]),t._v(" 3.prompt(msg,default)")]),t._v(" "),e("p",[t._v("//弹出输入框，返回消息或null")]),t._v(" "),e("p",[t._v("以上三个方法都会暂停代码的执行")]),t._v(" "),e("h3",{attrs:{id:"_4-open-url-name-options"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-open-url-name-options"}},[t._v("#")]),t._v(" 4.open(url,name,[options])")]),t._v(" "),e("p",[t._v("打开一个新窗口并返回新 window 对象")]),t._v(" "),e("p",[t._v("name:不命名会每次打开新窗口，命名的第一次打开新窗口,之后在这个窗口中加载")]),t._v(" "),e("p",[t._v("options为字符串：width=400,height=400,top=200,left=200'")]),t._v(" "),e("p",[t._v("opener父窗口对象，通过open方法打开的窗口才有opener对象")]),t._v(" "),e("h3",{attrs:{id:"_5-close"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-close"}},[t._v("#")]),t._v(" 5.close():")]),t._v(" "),e("p",[t._v("关闭窗口")]),t._v(" "),e("h3",{attrs:{id:"_6-print"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-print"}},[t._v("#")]),t._v(" 6.print():")]),t._v(" "),e("p",[t._v("调出打印对话框")]),t._v(" "),e("h2",{attrs:{id:"属性对象-location"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性对象-location"}},[t._v("#")]),t._v(" 属性对象 location")]),t._v(" "),e("p",[t._v("location是BOM最有用的对象之一，保存着当前窗口中加载文档的相关信息，还提供一些导航功能，它是个很特别的对象，既是window的属性，也是document的属性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var src=https://www.baidu.com/s?wd=yangmi\nlocation.href='整个网址/src'\nlocation.hash='#后面的字符'\nlocation.search='?wd=yangmi'\n")])])]),e("h1",{attrs:{id:"十、dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十、dom"}},[t._v("#")]),t._v(" 十、DOM")]),t._v(" "),e("h2",{attrs:{id:"概念-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念-2"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),e("p",[t._v("DOM是Document Object Model（文档对象模型）的缩写，它是W3C国际组织的一套Web标准。是针对HTML和XML文档的一个API，它定义了访问HTML文档对象的一套属性、方法和事件。")]),t._v(" "),e("p",[t._v("1.节点")]),t._v(" "),e("p",[t._v("元素节点")]),t._v(" "),e("p",[t._v("属性节点")]),t._v(" "),e("p",[t._v("文本节点")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('<div id="box" class="bb">bilibili</div>//此处4个节点，1元素，2属性，1文本\n')])])]),e("h2",{attrs:{id:"获取元素节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取元素节点"}},[t._v("#")]),t._v(" 获取元素节点")]),t._v(" "),e("h3",{attrs:{id:"_1-通过id名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-通过id名"}},[t._v("#")]),t._v(" 1.通过id名")]),t._v(" "),e("p",[t._v('document.getElementById("id名")')]),t._v(" "),e("ul",[e("li",[t._v("通过 ID获取元素的节点（速度最快）")]),t._v(" "),e("li",[t._v("必须通过document调用")]),t._v(" "),e("li",[t._v("返回DOM节点对象，如果id不存在返回null")])]),t._v(" "),e("h3",{attrs:{id:"_2-通过类名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-通过类名"}},[t._v("#")]),t._v(" 2.通过类名")]),t._v(" "),e("p",[t._v('getElementsByClassName("类名"); //通过类名获取；可以通过其他元素节点获取')]),t._v(" "),e("ul",[e("li",[t._v("通过class类名获取节点列表")]),t._v(" "),e("li",[t._v("返回类数组，如果类名不存在返回空数组[]")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('var box=document.getElementById("box");\nvar bb=box.getElementsByClassName("bb");\n')])])]),e("h3",{attrs:{id:"_3-通过标签名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-通过标签名"}},[t._v("#")]),t._v(" 3.通过标签名")]),t._v(" "),e("p",[t._v('getElementByTagName("标签名")；')]),t._v(" "),e("ul",[e("li",[t._v("通过标签名获取元素节点列表")]),t._v(" "),e("li",[t._v("返回类数组，如果tagname不存在返回空数组[]")])]),t._v(" "),e("h3",{attrs:{id:"_4-通过name属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-通过name属性"}},[t._v("#")]),t._v(" 4.通过name属性")]),t._v(" "),e("p",[t._v("document.getElementsByName()")]),t._v(" "),e("ul",[e("li",[t._v("通过name属性获取元素节点列表")]),t._v(" "),e("li",[t._v("必须通过document调用")]),t._v(" "),e("li",[t._v("返回类数组，如果name属性不存在返回空数组[]")])]),t._v(" "),e("p",[t._v("注意: 如果确认元素存在, 但是返回null或[]，一定是代码执行顺序的问题")]),t._v(" "),e("h3",{attrs:{id:"_5-利用节点关系，"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-利用节点关系，"}},[t._v("#")]),t._v(" 5.利用节点关系，")]),t._v(" "),e("p",[t._v("获取其他节点（包含文本节点）")]),t._v(" "),e("h4",{attrs:{id:"获取父级节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取父级节点"}},[t._v("#")]),t._v(" 获取父级节点")]),t._v(" "),e("p",[t._v("ele.parentNode  //得到节点的父节点")]),t._v(" "),e("h4",{attrs:{id:"获取子节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取子节点"}},[t._v("#")]),t._v(" 获取子节点")]),t._v(" "),e("p",[t._v("ele.childNodes  //得到ele元素的全部子节点列表（类数组）")]),t._v(" "),e("p",[t._v("ele.firstChild  //获得ele元素的第一个子节点")]),t._v(" "),e("p",[t._v("ele.lastChild  //获得ele元素的最后一个子节点")]),t._v(" "),e("h4",{attrs:{id:"获取兄弟节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取兄弟节点"}},[t._v("#")]),t._v(" 获取兄弟节点")]),t._v(" "),e("p",[t._v("ele.nextSibling  //获得ele元素的下一个兄弟节点")]),t._v(" "),e("p",[t._v("ele.previousSibling  //获得ele元素的上一个兄弟节点")]),t._v(" "),e("h3",{attrs:{id:"_6-节点的三个属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-节点的三个属性"}},[t._v("#")]),t._v(" 6.节点的三个属性")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}}),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("nodeType")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("nodeName")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("nodeValue")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("1.元素节点")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("1")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("标签名大写")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("null")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("2.属性节点")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性名")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("属性值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[t._v("3.文本节点")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("3")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("#text")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("文本内容")])])])]),t._v(" "),e("h3",{attrs:{id:"_7-利用元素节点关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-利用元素节点关系"}},[t._v("#")]),t._v(" 7.利用元素节点关系")]),t._v(" "),e("h4",{attrs:{id:"获取父级节点元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取父级节点元素"}},[t._v("#")]),t._v(" 获取父级节点元素")]),t._v(" "),e("p",[t._v("parentElement")]),t._v(" "),e("h4",{attrs:{id:"获取子级元素节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取子级元素节点"}},[t._v("#")]),t._v(" 获取子级元素节点")]),t._v(" "),e("p",[t._v("children获取元素的全部子元素")]),t._v(" "),e("p",[t._v("firstElementChild获取第一个子元素")]),t._v(" "),e("p",[t._v("lastElementChild获取最后一个子元素")]),t._v(" "),e("h4",{attrs:{id:"获取兄弟元素节点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取兄弟元素节点"}},[t._v("#")]),t._v(" 获取兄弟元素节点")]),t._v(" "),e("p",[t._v("nextElementSibling 获取下一个元素")]),t._v(" "),e("p",[t._v("previousElementSibling 获取上一个元素")]),t._v(" "),e("h3",{attrs:{id:"_8-节点的创建与插入方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-节点的创建与插入方法"}},[t._v("#")]),t._v(" 8.节点的创建与插入方法")]),t._v(" "),e("p",[t._v("创建：")]),t._v(" "),e("ul",[e("li",[t._v("document.createElement() 创建一个元素节点")]),t._v(" "),e("li",[t._v("document.createTextNode() 创建一个文本节点")]),t._v(" "),e("li",[t._v("document.createAttribute() 创建一个属性节点（了解）")])]),t._v(" "),e("p",[t._v("插入：")]),t._v(" "),e("ul",[e("li",[t._v("parent.appendChild()  向节点的子节点列表的结尾添加新的子节点")]),t._v(" "),e("li",[t._v("parent.insertBefore(new,node)  在指定的子节点node前插入新的子节点new。")]),t._v(" "),e("li",[t._v("ele.setAttributeNode(attrNode) 在指定元素中插入一个属性节点（了解）")])]),t._v(" "),e("p",[t._v("对页面已存在节点的处理")]),t._v(" "),e("p",[t._v("复制")]),t._v(" "),e("ul",[e("li",[t._v("cloneNode(boolean)  复制节点，为true是深复制。")])]),t._v(" "),e("p",[t._v("删除：")]),t._v(" "),e("ul",[e("li",[t._v("parent.removeChild(ele)  删除（并返回）当前节点parent的指定子节点ele。")])]),t._v(" "),e("p",[t._v("判断：")]),t._v(" "),e("ul",[e("li",[t._v("parent.hasChildNodes() 判断当前节点是否拥有子节点,返回布尔值")])]),t._v(" "),e("h2",{attrs:{id:"元素节点（对象）的属性及方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元素节点（对象）的属性及方法"}},[t._v("#")]),t._v(" 元素节点（对象）的属性及方法")]),t._v(" "),e("h3",{attrs:{id:"_1-常用属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-常用属性"}},[t._v("#")]),t._v(" 1.常用属性")]),t._v(" "),e("p",[t._v("可以通过点语法或方括号访问")]),t._v(" "),e("ul",[e("li",[t._v("tagName 获取元素元素的标签名")]),t._v(" "),e("li",[t._v("id 设置/获取元素id属性")]),t._v(" "),e("li",[t._v("name 设置/获取元素name属性")]),t._v(" "),e("li",[t._v("style 设置/获取元素的内联样式")]),t._v(" "),e("li",[t._v("className 设置/获取元素的class属性")]),t._v(" "),e("li",[t._v("innerHTML 设置/获取元素的内容（包含html代码）")]),t._v(" "),e("li",[t._v("outerHTML 设置或获取元素及其内容（包含html代码）")]),t._v(" "),e("li",[t._v("innerText 设置或获取位于元素标签内的文本")]),t._v(" "),e("li",[t._v("outerText 设置(包括标签)或获取(不包括标签)元素的文本")])]),t._v(" "),e("h3",{attrs:{id:"_2-元素方法（修改html属性）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-元素方法（修改html属性）"}},[t._v("#")]),t._v(" 2.元素方法（修改html属性）")]),t._v(" "),e("ul",[e("li",[t._v("ele.getAttribute(attr) //获取元素的属性值（自定义属性获取）")]),t._v(" "),e("li",[t._v("ele.setAttribute(attr,val); //设置元素的属性")]),t._v(" "),e("li",[t._v("ele.removeAttribute(attr) //删除属性attr")]),t._v(" "),e("li",[t._v("ele.hasAttribute(attr) //判断是否存在属性attr")])]),t._v(" "),e("h3",{attrs:{id:"_3-盒模型相关"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-盒模型相关"}},[t._v("#")]),t._v(" 3.盒模型相关")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("offsetTop: 当前元素离<定位父级>元素顶部的距离。\noffsetLeft: 当前元素离<定位父级>元素左边的距离。\n\t以上两个属性如果没定位的父级，则相对于根元素html的距离\noffsetWidth: 当前元素的宽度（border + padding + content）\noffsetHeight: 当前元素的高度（border + padding + content）\n")])])]),e("h2",{attrs:{id:"table对象-了解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#table对象-了解"}},[t._v("#")]),t._v(" table对象(了解)")]),t._v(" "),e("h3",{attrs:{id:"_1-table对象属性-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-table对象属性-方法"}},[t._v("#")]),t._v(" 1. table对象属性&方法")]),t._v(" "),e("ul",[e("li",[t._v("rows 返回包含表格中所有行的一个数组")]),t._v(" "),e("li",[t._v("tBodies 返回包含表格中所有 tbody 的一个数组")]),t._v(" "),e("li",[t._v("insertRow(index) 在表格中插入一个新行。")]),t._v(" "),e("li",[t._v("deleteRow(index) 从表格删除一行。")])]),t._v(" "),e("h3",{attrs:{id:"_2-tr对象属性-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-tr对象属性-方法"}},[t._v("#")]),t._v(" 2. tr对象属性&方法")]),t._v(" "),e("ul",[e("li",[t._v("cells 返回包含表格中所有单元格的一个数组")]),t._v(" "),e("li",[t._v("rowIndex 返回该行在表中的位置")]),t._v(" "),e("li",[t._v("sectionRowIndex 返回在 tBody 、tHead 或 tFoot 中行的位置。")]),t._v(" "),e("li",[t._v("insertCell(index) 在一行中的指定位置插入一个空的列")]),t._v(" "),e("li",[t._v("deleteCell(index) 删除行中的指定的单元格")])]),t._v(" "),e("h3",{attrs:{id:"_3-td-th对象属性-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-td-th对象属性-方法"}},[t._v("#")]),t._v(" 3. td/th对象属性&方法")]),t._v(" "),e("ul",[e("li",[t._v("cellIndex 返回单元格在表格行的单元格集合中的位置。")])]),t._v(" "),e("h1",{attrs:{id:"十一、事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十一、事件"}},[t._v("#")]),t._v(" 十一、事件")]),t._v(" "),e("h2",{attrs:{id:"鼠标事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#鼠标事件"}},[t._v("#")]),t._v(" 鼠标事件")]),t._v(" "),e("p",[t._v("onclick当用户点击某个对象时调用的事件。")]),t._v(" "),e("p",[t._v("ondblclick当用户双击某个对象时调用的事件。")]),t._v(" "),e("p",[t._v("onmousedown鼠标按钮被按下。")]),t._v(" "),e("p",[t._v("onmouseup鼠标按键被松开。")]),t._v(" "),e("p",[t._v("onmouseover 鼠标移到某元素之上。")]),t._v(" "),e("p",[t._v("onmouseout 鼠标从某元素移开。")]),t._v(" "),e("p",[t._v("onmousemove鼠标被移动时触发。")]),t._v(" "),e("p",[t._v("onmouseenter在鼠标光标从元素外部移动到元素范围之内时触发。这个事件不冒泡")]),t._v(" "),e("p",[t._v("onmouseleave在位于元素上方的鼠标光标移动到元素范围之外时触发。这个事件不冒泡")]),t._v(" "),e("p",[t._v("oncontextmenu 鼠标右键菜单展开时触发")]),t._v(" "),e("p",[t._v("PS：click = mousedown + mouseup, dblclick = click*2(短时间内两次单击);\n执行顺序：mouseover=>mouseenter; mouseout => mouseleave")]),t._v(" "),e("h2",{attrs:{id:"事件对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件对象"}},[t._v("#")]),t._v(" 事件对象")]),t._v(" "),e("p",[t._v("事件执行过程中的状态，用来保存当前事件的信息的对象")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("ele.事件 = function(e){\n\te = e || window.event;//获取event对象的兼容写法。IE8-：window.event\n}\n")])])]),e("p",[t._v("兼容性代码：e=e||window.event")]),t._v(" "),e("p",[t._v("//标准浏览器：e")]),t._v(" "),e("p",[t._v("//ie8：false ||window.event ==>window.event")]),t._v(" "),e("h3",{attrs:{id:"_1-事件对象的属性（与鼠标相关）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-事件对象的属性（与鼠标相关）"}},[t._v("#")]),t._v(" 1.事件对象的属性（与鼠标相关）")]),t._v(" "),e("p",[t._v("e.button")]),t._v(" "),e("p",[t._v("当事件被触发时，返回哪个鼠标按钮被点击")]),t._v(" "),e("p",[t._v("W3C标准：0代表鼠标按下左键；1代表按下了滚轮；2代表按下了右键；")]),t._v(" "),e("p",[t._v("IE8：1鼠标左键，2鼠标右键，3左右同时按，4滚轮，5左键加滚轮，6右键加滚轮，7三个同时；")]),t._v(" "),e("h3",{attrs:{id:"_2-光标位置信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-光标位置信息"}},[t._v("#")]),t._v(" 2.光标位置信息")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("e.clientX /e.clientY 光标相对于浏览器可视区域的位置，也就是浏览器坐标。\ne.screenX/e.screenY 光标指针相对于电脑屏幕的水平/垂直坐标。\ne.pageX/e.pageY:鼠标相对于文档的位置。\n\t* 包括滚动条滚动的距离，即：e.clientX+window.scrollX\n\t* IE8-不支持\n\te.offsetX,e.offsetY: 光标相对于事件源对象的相对偏移量。\n\t* 事件源对象：触发事件的对象\n")])])]),e("h2",{attrs:{id:"键盘事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#键盘事件"}},[t._v("#")]),t._v(" 键盘事件")]),t._v(" "),e("p",[t._v("onkeydown 某个键盘按键被按下。\nonkeyup 某个键盘按键被松开。\nonkeypress 键盘<字符键>被按下触发,而且如果按住不放的话，会重复触发此事件。")]),t._v(" "),e("p",[t._v("1.事件 对象的属性（与键盘相关）")]),t._v(" "),e("p",[t._v("（1）which/keyCode")]),t._v(" "),e("p",[t._v("对于keypress事件，该属性声明了被敲击的键生成的 Unicode 字符码(ascii码)")]),t._v(" "),e("p",[t._v("对于keydown和keyup事件，它指定了被敲击的键的虚拟键盘码。虚拟键盘码可能和使用的键盘的布局相关。")]),t._v(" "),e("p",[t._v("兼容代码：e.which=e.which||e.keyCode")]),t._v(" "),e("p",[t._v("（2）altKey 当事件被触发时，ALT键是否被按下，返回值为布尔值")]),t._v(" "),e("p",[t._v("（3）ctrlKey 当事件被触发时CTRL键是否被按下")]),t._v(" "),e("p",[t._v("（4）shiftKey 当事件被触发时，Shift键是否被按下；")]),t._v(" "),e("h2",{attrs:{id:"阻止浏览器的默认行为"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#阻止浏览器的默认行为"}},[t._v("#")]),t._v(" 阻止浏览器的默认行为")]),t._v(" "),e("p",[t._v("1.阻止右键鼠标的默认行为")]),t._v(" "),e("p",[t._v("oncontextmenu")]),t._v(" "),e("p",[t._v("2.文本的选择")]),t._v(" "),e("p",[t._v("3.表单的提交")]),t._v(" "),e("p",[t._v("4.链接的跳转")]),t._v(" "),e("p",[t._v("标准： event.preventDefault();")]),t._v(" "),e("p",[t._v("IE8-: event.returnValue=false;")]),t._v(" "),e("p",[t._v("兼容：event.preventDefault? event.preventDefault():event.returnValue=false")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t//1.全局阻止\n\t\t// document.oncontextmenu=function(e){\n\t\t// \te.preventDefault();\n\t\t// }\n\t\t//2.元素内阻止\n\t\t// var box=document.getElementById('box');\n\t\t// box.oncontextmenu=function(e){\n\t\t// \te.preventDefault();\n\t\t// }\n")])])]),e("h2",{attrs:{id:"事件冒泡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件冒泡"}},[t._v("#")]),t._v(" 事件冒泡")]),t._v(" "),e("h3",{attrs:{id:"什么是事件冒泡："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是事件冒泡："}},[t._v("#")]),t._v(" 什么是事件冒泡：")]),t._v(" "),e("blockquote",[e("p",[t._v("在一个对象上触发某类事件（如onclick事件），那么click事件就会沿着DOM树向这个对象的父级传播，从里到外，直至它被处理程序处理，或者事件到达了最顶层（document/window）")])]),t._v(" "),e("h4",{attrs:{id:"演示：从里到外的元素添加相同的事件，查看事件冒泡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#演示：从里到外的元素添加相同的事件，查看事件冒泡"}},[t._v("#")]),t._v(" 演示：从里到外的元素添加相同的事件，查看事件冒泡")]),t._v(" "),e("p",[t._v("1）不是所有的事件都能冒泡。")]),t._v(" "),e("p",[t._v("​\t以下事件不冒泡：blur、focus、load、unload…。")]),t._v(" "),e("p",[t._v("​\t【onmouseover与onmouseenter的区别】")]),t._v(" "),e("p",[t._v("2）冒泡到最顶层的目标不同。大部分浏览器到window对象，IE8-到document对象")]),t._v(" "),e("h3",{attrs:{id:"停止事件的传播"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#停止事件的传播"}},[t._v("#")]),t._v(" 停止事件的传播")]),t._v(" "),e("p",[t._v("兼容：e.stopPropagation?e.stopPropagation():e.cancelBubble = true;")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v(" 标准：event.stopPropagation(); \n IE8-：event.cancelBubble = true; \n // 阻止事件冒泡兼容写法：\n if(e.stopPropagation){\n \te.stopPropagation();\n }else{\n\te.cancelBubble = true;\n }\n")])])]),e("h3",{attrs:{id:"事件委托"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件委托"}},[t._v("#")]),t._v(" 事件委托")]),t._v(" "),e("p",[t._v("​\t利用事件冒泡原理，把本来绑定给某个元素的事件委托给它的父级（已经存在页面元素）处理。")]),t._v(" "),e("h4",{attrs:{id:"事件源对象：触发事件的元素"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件源对象：触发事件的元素"}},[t._v("#")]),t._v(" 事件源对象：触发事件的元素")]),t._v(" "),e("p",[t._v("标准：event.target\nIE8-：event.srcElement")]),t._v(" "),e("p",[t._v("兼容：e.target=e.target || e.srcElement;")]),t._v(" "),e("h4",{attrs:{id:"案例：表格删除当前行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#案例：表格删除当前行"}},[t._v("#")]),t._v(" 案例：表格删除当前行")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("//影响页面性能的三大操作：\n\t//* 事件数量\n\t//* dom节点操作次数\n\t//* 请求次数\noutput.onclick = function(e){\t\n\t//兼容性问题\n    e = e || window.event;\n    var target = e.target || e.srcElement;\n    if(target.className === 'btnDel'){\n    \t//this指的是谁?\n        var currentTr = target.parentNode.parentNode;\n        currentTr.parentNode.removeChild(currentTr);\n    }else if(target.className === 'btnCopy'){\n        var currentTr = target.parentNode.parentNode;\n        currentTr.parentNode.appendChild(currentTr.cloneNode(true));\n    }\n}\n")])])]),e("h2",{attrs:{id:"事件捕获"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件捕获"}},[t._v("#")]),t._v(" 事件捕获")]),t._v(" "),e("p",[t._v("从DOM树顶端到当前元素，执行事件。")]),t._v(" "),e("h2",{attrs:{id:"绑定事件的方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#绑定事件的方式"}},[t._v("#")]),t._v(" 绑定事件的方式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//（1）作为html属性\n//\t\t<div onclick="sum()"></div> 不常用，不实用。\n//（2）DOM节点绑定\n//\t\t*同一元素的同名事件会被覆盖\n//  \t*事件处理函数只能冒泡阶段执行\n//\t\tdiv.onclick = function(){}\n//（3）事件监听器\n//\t\taddEventListener(事件,function(){}[,是否捕获])\n//\t\t默认false冒泡不捕获，true捕获\n//\t\t*同名事件不会被覆盖\n//  \t*事件处理函数默认冒泡阶段执行\n')])])]),e("h3",{attrs:{id:"事件监听器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件监听器"}},[t._v("#")]),t._v(" 事件监听器")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('//标准浏览器：元素.addEventListener(事件名,事件处理函数,是否捕获（默认false，为冒泡）)\ntarget.addEventListener("click", fn, false);\n//IE8-：元素.attachEvent(on+事件名,事件处理函数)没有捕获阶段\ntarget.attachEvent("onclick",fun);\n')])])]),e("ul",[e("li",[t._v("可以绑定多个处理函数在一个对象上, 执行顺序按照绑定的顺序来(标准)\n"),e("ul",[e("li",[t._v("不同元素事件执行顺序跟html结构有关")]),t._v(" "),e("li",[t._v("相同元素事件执行顺序跟绑定先后有关")])])]),t._v(" "),e("li",[t._v("可以绑定多个函数在一个对象上, 执行顺序按照绑定的反序（ie8-）")])]),t._v(" "),e("p",[t._v("封装：绑定事件，兼容浏览器")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("function bind(ele,type,handler,isCapture){\n\t// 优先使用事件监听器\n\tif(ele.addEventListerner){\n\t\t// 标准浏览器\n\t\tele.addEventListerner(type,handler,isCapture);\n\t}else if(ele.attachEvent){\n\t\t// IE8-\n\t\tele.attachEvent('on' + type,handler);\n\t}else{\n\t\t// DOM节点绑定方式\n\t\tele['on' + type] = handler\n\t}\n}\n")])])]),e("h2",{attrs:{id:"事件的移除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件的移除"}},[t._v("#")]),t._v(" 事件的移除")]),t._v(" "),e("h3",{attrs:{id:"dom绑定事件的移除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dom绑定事件的移除"}},[t._v("#")]),t._v(" DOM绑定事件的移除")]),t._v(" "),e("p",[t._v("​\tele.on+事件 = null；")]),t._v(" "),e("h3",{attrs:{id:"事件监听器移除"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#事件监听器移除"}},[t._v("#")]),t._v(" 事件监听器移除")]),t._v(" "),e("ul",[e("li",[t._v("标准：removeEventListener(type,fn, true)传入的参数fn要跟添加时一样(同一个函数)，否则不能移除事件")]),t._v(" "),e("li",[t._v("IE8-：detachEvent('on'+type,fun)，传入的参数fun要跟添加时一样，否则不能移除事件")])]),t._v(" "),e("blockquote",[e("p",[t._v("注意：\n页面事件绑定数量越多，越影响性能（速度越慢）")])]),t._v(" "),e("h1",{attrs:{id:"十二、正则表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十二、正则表达式"}},[t._v("#")]),t._v(" 十二、正则表达式")]),t._v(" "),e("h2",{attrs:{id:"概念-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念-3"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),e("p",[t._v("正则表达式（regular expression）是一个描述字符模式的对象")]),t._v(" "),e("p",[t._v("能够进行强大的“模式匹配”和“文本检索与替换”功能。前端往往有大量的表单数据校验的工作，采用正则表达式会使得数据校验的工作量大大减轻")]),t._v(" "),e("h2",{attrs:{id:"创建正则表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建正则表达式"}},[t._v("#")]),t._v(" 创建正则表达式")]),t._v(" "),e("p",[t._v("1.字面量")]),t._v(" "),e("p",[t._v("var reg=/字符串||匹配规则/gi;")]),t._v(" "),e("p",[t._v("g全局匹配，i不区分大小写")]),t._v(" "),e("p",[t._v("2.构造函数")]),t._v(" "),e("p",[t._v('var reg=new RegExp("字符串||匹配规则",gi);')]),t._v(" "),e("h2",{attrs:{id:"支持正则表达式的字符串方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持正则表达式的字符串方法"}},[t._v("#")]),t._v(" 支持正则表达式的字符串方法")]),t._v(" "),e("p",[t._v("1.search()")]),t._v(" "),e("p",[t._v("返回第一次匹配时所在的索引值，如果匹配不到则返回-1；")]),t._v(" "),e("p",[t._v("2.match()")]),t._v(" "),e("p",[t._v("默认匹配字符串，返回一个数组")]),t._v(" "),e("p",[t._v("0：所匹配的字符")]),t._v(" "),e("p",[t._v("index:匹配第一个字符所在的索引")]),t._v(" "),e("p",[t._v("input:对字符串的引用")]),t._v(" "),e("p",[t._v("全局匹配(g)，返回一个匹配所有字符串的数组，如果匹配不到则返回null")]),t._v(" "),e("p",[t._v("3.replace()")]),t._v(" "),e("p",[t._v("替换字符串")]),t._v(" "),e("h2",{attrs:{id:"匹配规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#匹配规则"}},[t._v("#")]),t._v(" 匹配规则")]),t._v(" "),e("p",[t._v("1.字符类（不说数量则默认只匹配一个）")]),t._v(" "),e("p",[t._v("\\d 数字")]),t._v(" "),e("p",[t._v("\\D非数字")]),t._v(" "),e("p",[t._v("\\w代表数字、字母、下划线")]),t._v(" "),e("p",[t._v("\\W非数字字母和下划线字符")]),t._v(" "),e("p",[t._v("\\s空格")]),t._v(" "),e("p",[t._v("\\S空格以外的字符")]),t._v(" "),e("p",[t._v(".除换行以外的所有字符")]),t._v(" "),e("p",[t._v("\\b : 匹配一个单词边界，也就是指单词和空格间的位置")]),t._v(" "),e("p",[t._v("\\B : 匹配非单词边界。")]),t._v(" "),e("p",[t._v("单词和数字会被认为没有边界")]),t._v(" "),e("p",[t._v("PS:以上所有字符类都只是匹配“一个”字符")]),t._v(" "),e("p",[t._v("2.特殊符号^ $ . * + ? = ! : | \\ / () [] {}")]),t._v(" "),e("p",[t._v("(1)表示数量：（默认遵循贪婪模式，越多越好）")]),t._v(" "),e("p",[t._v("+匹配1个或多个字符{1,}")]),t._v(" "),e("p",[t._v("*匹配0个字符以上{0,}")]),t._v(" "),e("p",[t._v("?匹配0个或1个字符{0,1}")]),t._v(" "),e("p",[t._v("{2,4}最少2个，最多4个；匹配到2~4个字符")]),t._v(" "),e("p",[t._v("(2)[]代表任意“单个字符”，里面的内容表示“或”的关系")]),t._v(" "),e("p",[t._v("-表示范围")]),t._v(" "),e("p",[t._v("例如：console.log(str.match(/[a-z]+/g));")]),t._v(" "),e("p",[t._v("^代表非")]),t._v(" "),e("p",[t._v("():表示一个整体，普通括号(?😃")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var reg=/(?:\\d{17}|\\d{14})[\\dx]/\n")])])]),e("p",[t._v("(): 表示分组（n是以最左边括号出现的顺序排列)")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("$1: 表示第一个分组")])]),t._v(" "),e("li",[e("p",[t._v("$n: 表示第n个分组（不能写在正则表达式里）")])]),t._v(" "),e("li",[e("p",[t._v("\\n: 在正则分组后面使用，表示对第n个分组的引用(一定要写在正则表达式里)")]),t._v(" "),e("p",[t._v("PS: 编写的正则分组数量越少越好")])])]),t._v(" "),e("p",[t._v('var str="张益达,李小璐,张非凡";')]),t._v(" "),e("p",[t._v("|: 表示或者")]),t._v(" "),e("p",[t._v("锚点定位")]),t._v(" "),e("ul",[e("li",[t._v("^: 表示以什么开头")]),t._v(" "),e("li",[t._v("$: 表示以什么结尾")])]),t._v(" "),e("p",[t._v("表示数量，对前一个字符计数，")]),t._v(" "),e("ul",[e("li",[t._v("*: 代表0个或0个以上 <===>{0,}")]),t._v(" "),e("li",[t._v("+: 代表1个或1个以上 <===>{1,}")]),t._v(" "),e("li",[t._v("?: 代表0个或1个 <===>{0,1}")]),t._v(" "),e("li",[t._v("{}:")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\\d{5}: 匹配5个数字\n\\d{5,10}: 匹配5个到10个数字\n\\d{5,}: 匹配5个或5个以上的数字\n")])])]),e("p",[t._v("非贪婪模式，在后面加问号")]),t._v(" "),e("p",[t._v("/\\d{5,10}?/g")]),t._v(" "),e("h1",{attrs:{id:"十三、es5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十三、es5"}},[t._v("#")]),t._v(" 十三、ES5")]),t._v(" "),e("h2",{attrs:{id:"支持es5的浏览器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#支持es5的浏览器"}},[t._v("#")]),t._v(" 支持ES5的浏览器")]),t._v(" "),e("p",[t._v("ie9+")]),t._v(" "),e("h2",{attrs:{id:"页面加载事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#页面加载事件"}},[t._v("#")]),t._v(" 页面加载事件")]),t._v(" "),e("p",[t._v("1、解析HTML结构")]),t._v(" "),e("p",[t._v("2、加载外部脚本和样式表文件")]),t._v(" "),e("p",[t._v("3、解析并执行脚本代码")]),t._v(" "),e("p",[t._v("4、DOM树构建完成 //DOMContentLoaded")]),t._v(" "),e("p",[t._v("5、加载图片等外部文件")]),t._v(" "),e("p",[t._v("6、页面加载完毕 //window.onload")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("* readystatechange事件（准备阶段状态改变，两个状态）\n    * interactive \t：DOM树完成执行\n    * complete\t\t：类似window.onload,但比window.onload先执行\n* DOMContentLoaded事件\n\t* DOM树完成执行\n    * 必须使用事件监听器绑定document事件\nPS:以上事件用以取代window.onload事件（实际开发不常用）\n\n")])])]),e("h2",{attrs:{id:"es5的严格模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#es5的严格模式"}},[t._v("#")]),t._v(" ES5的严格模式")]),t._v(" "),e("p",[t._v("ie9不支持严格模式")]),t._v(" "),e("p",[t._v('1、使用严格模式：在当前作用域的最前面"use strict"')]),t._v(" "),e("p",[t._v("意义：增加JS语法的严谨性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('2、为什么要用严格模式\n* 消除javascript语法的一些不合理，不严谨的地方，减少一些怪异行为；\n* 消除代码运行的一些不安全之处，保证代码运行的安全；\n* 提高编译器效率，增加运行速度；\n* 为未来新版本的javascript做好铺垫；\n\n3、如何使用严格模式\n* 全局：针对整个js文件\n  将”use strict”放在js文件的第一行\n* 局部：针对单个函数\n  将”use strict”放在函数体的第一行\n\tfunction strict(){\n    \t"use strict";\n   \t\t return "这是严格模式";\n\t}\n\t\n4、执行严格模式后的一些限制\n* 不使用var声明变量严格模式中将不通过\n* 删除系统内置的属性会报错 \n* 不能删除var声明的全局变量（会自动成为window的属性）\n* 对象有重名的属性将报错\n  * var obj={name:"小王",name:\'王大锤\'}\n* 函数有重名的形参将报错\n  * function sum(a,a,b){}\n* arguments严格定义为参数，保存实参信息\n  * 不允许对arguments赋值\n  * 禁止使用arguments.callee（相当于递归）\n* 函数必须声明在顶层，不能写在条件判断语句或for循环语句中\n  var arr = [10,2,3,50];\n  if(arr.length>3){\n      function sum(){//报错}\n  }\n\n')])])]),e("h2",{attrs:{id:"获取元素节点-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取元素节点-2"}},[t._v("#")]),t._v(" 获取元素节点")]),t._v(" "),e("p",[t._v("1、document.querySelector(css选择器) 获取匹配选择器的第一个元素节点，返回DOM节点")]),t._v(" "),e("p",[t._v("1、document.querySelectorAll(css选择器) 获取匹配选择器的所有元素节点，返回类数组")]),t._v(" "),e("h2",{attrs:{id:"function方法bind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#function方法bind"}},[t._v("#")]),t._v(" Function方法bind()")]),t._v(" "),e("p",[t._v("1、bind() 用于将当前函数和指定对象绑定（改变this指向），返回一个新函数")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("应用\nvar btns = document.querySelectorAll('.btn');\nfor(var i=0;i<btns.length;i++){\n    btns[i].onclick = function(){\n        //方式1(1)：var self = this;\n        setTimeout(function(){\n            //(2)console.log(self.innerHTML);\n            //方式2.bind()改变this的指向\n            console.log(this.innerHTML);\n        }.bind(this),1000);\n    };\n}\n")])])]),e("h2",{attrs:{id:"获取class的属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取class的属性"}},[t._v("#")]),t._v(" 获取class的属性")]),t._v(" "),e("p",[t._v("操作类名的方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("classList对象\n\t-length:class类名的个数\n\t-add():添加class方法\n\t-remove():删除class方法\n\t-toggle():切换class方法\n\t-contains():是否含有某个类，返回布尔值\n")])])]),e("h2",{attrs:{id:"data自定义属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#data自定义属性"}},[t._v("#")]),t._v(" data自定义属性")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('-w3c规定的自定义属性的格式为[data-**=""]\n-dataset对象\n\tdata-age="17" <==>ele.dataset.age=17;\n')])])]),e("h1",{attrs:{id:"十四、es6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#十四、es6"}},[t._v("#")]),t._v(" 十四、ES6")]),t._v(" "),e("h2",{attrs:{id:"let变量声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let变量声明"}},[t._v("#")]),t._v(" let变量声明")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let:声明变量\n-变量声明不会提前\n-let不允许相同作用域内多次声明同一变量\n-块级作用域{}  //花括号内为块级作用域\n")])])]),e("h2",{attrs:{id:"const声明常量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#const声明常量"}},[t._v("#")]),t._v(" const声明常量")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("-变量声明不会提前\n-const不允许相同作用域内多次声明同一变量\n-块级作用域\n-声明后无法修改值\n*建议命名时全部大写，用_隔开多个单词\n")])])]),e("h2",{attrs:{id:"解构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解构"}},[t._v("#")]),t._v(" 解构")]),t._v(" "),e("p",[t._v('声明变量时，从数组或对象中提取值，对变量进行赋值，这被叫做"解构"')]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('（一）数组解构\n1、常规操作\n\tvar [a,b,c]=[1,2,3]; //等同于var a=1,b=2,c=3\n2、...表示获取剩余的所有参数\n\tvar [a,...b]=[1,2,3,4]; //等同于var a=1,b=[2,3,4];\n3、解构失败\n如果变量个数多于赋值数，多余变量为undefined;\n例如：var [a]=1; //报错：1 is not iterable\n解构-左右都要有中括号\n4、指定默认值\n\tvar [a,b,c=1]=[10,30] //若解构失败，为默认值\n\t//a=10,b=30,c=1\n（二）对象解构\n1、常规操作\n\tobj={\n        guid:"01",\n        name:"猫爪杯",\n        price:888\n\t}\n\tvar {guid,name,price}=obj;\n2、解构失败：变量名与属性名不相同，返回值为undefined\n3、如果变量名与属性名不相同，则必须写成以下格式才能取到值\n{原属性名:变量名}\n4、指定默认值\n\tvar {a=10}={}; //当a解构失败的话，拿到默认值\n（三）应用\n1、交换变量值\nvar x=10;\nvar y=20;\nvar [x,y]=[y,x];\n2、函数返回多个值\n    //数组：\n    function example(){\n         return [1,2,3]\n    }\n    var [x,y,z] = example();\n    //对象：\n    function example(){\n         return {name:"lemon",age:18};\n    }\n    var {name,age} = example();\n3、定义函数形参（重点）\n    //数组：\n    function test([x,y,z]){\n        //相当于 var [x,y,z] = [1,2,3];\n    }\n    test([1,2,3]);\n    //对象：\n    function test({name,age}){\n        //相当于 var {name,age} = {name:"lemon",age:18};\n    }\n    test({name:"lemon",age:18});\n\n    //常规操作：参数可以设置默认值\n    fuction test({x=0,y=0,z=0}){\n        //相当于var {x=0,y=0,z=0} = {x:10}\n        //为避免没有实参值传入，给形参默认值\n    }\n    test({x:10});\n\n    //扩展：若形参是基本数据类型，函数也可以对形参进行设置默认值的操作。\n    var func1 = function(x=1,y=2){return x+y}；\n    func1(); // 得到 3\n    //同样，也可以用...表示获取剩余参数\n    var func2 = (x, ...args) => { console.log(args) };\n    func2(1,2,3); // 输出 [2,3]\n')])])]),e("h2",{attrs:{id:"字符串扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串扩展"}},[t._v("#")]),t._v(" 字符串扩展")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("字符串方法\n1、includes\n\t判断是否包含某个字符，返回布尔值\n'html5'.includes('html');//true\n2、startsWith/endsWith\n\t是否以某一字符或某一字符串开头/结尾\n\tlet str='google';\n    str.startsWith('goo');  //true\n    str.endsWith('e');    //true\n3、repeat(n)\n\t得到字符串重复n次后的结果，n可以为小数，但不能为负数\n    'laoxie'.repeat(2);//laoxielaoxie\n\n")])])]),e("h2",{attrs:{id:"字符串模板"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串模板"}},[t._v("#")]),t._v(" 字符串模板")]),t._v(" "),e("p",[t._v("template string")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("-使用反引号``表示，你可以通过一种更加美观、更加方便的方式向字符串中插入变量\n-格式：${变量|函数}，\n `你好，我的名字叫${username},接下来是我的自我介绍：${introduce()}` \n 模板字符串中所有的空格、新行、缩进，都会原样输出在生成的字符串中。\n")])])]),e("h2",{attrs:{id:"函数扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数扩展"}},[t._v("#")]),t._v(" 函数扩展")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("（一）箭头函数\n*可以省略function、return、()、{}\n 1.{}内部只有一句返回代码，可以省略return\n \t没有参数或有多个参数不能省略()\n \t//var sum = () => 3;var sum = (a,b) => 3;\n \t只有一个参数，可以省略()\n \t//var sum = a => 3;\n 2.{}内部有多句代码，不能省略{}、return\n \t=>后紧接着的{}代表代码块\n \t如果返回一个对象，两种写法\n \t(1)var sum=()=>({name:'lemon'})\n \t(2)var sum=()=>{return {name:'lemon}}\n 3.箭头函数没有this，它的this继承自外部作用域\n \n（二）生成器函数\n \t-function和函数名之间有一个*号,*紧跟function\n \t\t函数名():执行后，得到一个状态为suspended的对象{next()}\n    -yield:暂停代码执行\n    -return:终止函数\n    -next():执行后得到一个对象，有两个属性如下:\n    \tvalue:暂停时返回的值(yield)\n    \tdone:表示函数是否执行完毕\n")])])]),e("h2",{attrs:{id:"set集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set集合"}},[t._v("#")]),t._v(" set集合")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("（一）Set集合，\n    类似于数组，但是成员的值都是唯一的，可自动去重。\n    去重的前提是两个值全等于。\n（二）set的方法\n    * add(value)：添加某个值，返回Set结构本身。\n    * delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。\n    * has(value)：返回一个布尔值，表示Set集合中是否存在该值。\n    * clear()：清除所有成员，没有返回值。\n（三）利用set去重数组\n    var arr = [1, 2, 3, 4, 5, 5, 5, 5]；\n    let items = new Set(arr);\n    //去重后将set集合重新转成数组\n    arr = Array.from(items)；\n（四）遍历set集合\n\t* forEach()\n\t* for…of\n        set.forEach((item,idx)=>{\n            console.log(item,idx);//索引值与item值相同\n        })\n\n        var imgs = new Set(['a','b','c']); //根据KEY遍历 \n        for(let item of imgs){\n             console.log(item); \n        } \n")])])]),e("p",[t._v("for...of")]),t._v(" "),e("ul",[e("li",[t._v("这是最简洁、最直接的遍历数组元素的语法")]),t._v(" "),e("li",[t._v("这个方法避开了for-in循环的所有缺陷")]),t._v(" "),e("li",[t._v("for…of跟for-in的区别很明显，就是直接取值，而不再取下标了")]),t._v(" "),e("li",[t._v("与forEach()不同的是，它可以正确响应break、continue和return语句")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("var arr = [10,12,18,30];\nfor (var value of arr) {\n  console.log(value);\n}\n")])])]),e("blockquote",[e("p",[t._v("只要有[迭代器Symbol(Symbol.iterator)  ]就可以用for...of遍历")])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("Array")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("DOM")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("Set/Map集合")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("String")])])]),t._v(" "),e("blockquote",[e("ul",[e("li",[t._v("不支持普通对象")])])]),t._v(" "),e("h2",{attrs:{id:"对象扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象扩展"}},[t._v("#")]),t._v(" 对象扩展")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("（一）对象合并方法\nObject.assign(obj1,obj2,...objN);合并对象到obj1，返回obj1\n\tvar obj1 = {a:1}；\n    var newObj1 = Object.assign(obj1,{b:2});\n    1.合并对象到obj1,所以obj1 = {a:1,b:2}\n    2.返回obj1，传递给newObj1，所以newObj1 = {a:1,b:2}\n\n    var newObj2 = Object.assign(obj1,{b:2},{b:4,c:3});\n    *若存在相同属性，后面的覆盖前面的。//newObj=obj1={a:1,b:4,c:3}\n（二）对象的传递与复制 \n    var obj = {\n        name:\"laoxie\",\n        hobby:['大保健','money']\n    }\n    1.对象的传递：\n    var newObj = obj; //此时修改obj的任意属性，也会同时影响newObj\n    2.对象的复制\n    （1）for...in遍历复制\n    for(var key in obj){\n        newObj2[key] = obj[key];\n    }\n    （2）利用assign（）\n\t\tvar newObj3 = Object.assign({},obj);\n    \t注意：以上两种复制方式，都只支持浅拷贝（对于引用类型，只拷贝引用）\n\t\tobj.hobby.push('羽毛球');//此时也会影响newObj2与newObj3\n\n    （3）深拷贝\n\t\tvar newObj3 = JSON.parse(JSON.stringify(person))；\n（三）对象的简写\n\tES6允许在对象之中直接写变量\n    1. 属性简写\n        var myName = 'laoxie';\n        var obj = {myName};//等效于var obj = {myName:'laoxie'}。\n    \t//变量名作为属性名，变量值作为属性值。\n    2.变量值作为属性名\n        var obj = {\n            [myName]:18 //等效于 laoxie:18\n        }\n    3.方法简写\n        var obj = {\n            coding(){} //等效于 coding:function(){}\n        }\n")])])]),e("h2",{attrs:{id:"map集合"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map集合"}},[t._v("#")]),t._v(" Map集合")]),t._v(" "),e("h3",{attrs:{id:"_1-概念-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念-2"}},[t._v("#")]),t._v(" 1.概念")]),t._v(" "),e("p",[t._v("js对象（Object）只能用字符串当作键(属性名)。这让它的使用有了很大的限制。所以ES6推出了一种类似于对象的数据集合：Map集合，它能让所有类型的数据作为键")]),t._v(" "),e("h3",{attrs:{id:"_2-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-方法"}},[t._v("#")]),t._v(" 2.方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\t\t* 设置set(key, value)\n\t\t* 获取get(key)\n\t\t* has(key)\n\t\t* delete(key)\n\t\t* clear()\n\t（1）创建：\n        let map = new Map(); \n    （2）设置：\n        map.set('name','laoxie');\n        map.set(6,666);\n        // 把数组作为键\n        var arr = [10,20,30];\n        map.set(arr,'数组');\n        //获取：\n        map.get(arr); //[10,20,30]\n")])])]),e("h3",{attrs:{id:"_3-遍历方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-遍历方法"}},[t._v("#")]),t._v(" 3.遍历方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("    * keys() 获取所有键，可以用Array.from()转成数组\n    * values() 获取所有值，可以用Array.from()转成数组\n    * entries() 获取所有键值对，可以用Array.from()转成数组\n    * 循环遍历，配合解构赋值 for...of\n    for(var item of map){\n        console.log(item); //每个item得到的都是一个数组，索引0为键，索引1为值\n    } \n    //解构写法：\n    for(var [key,value] of map){\n        console.log(key,value);\n    }\n")])])]),e("h2",{attrs:{id:"symbol数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#symbol数据类型"}},[t._v("#")]),t._v(" Symbol数据类型")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("1.概念\n\tES6引入了一种新的原始数据类型Symbol，表示独一无二的值，一旦创建后就不可更改，是一种类似于字符串的数据类型，但Symbol 值不能与其他类型的值进行运算，否则报错。\n2.创建\n    (1)没有参数的情况\n    var s1 = Symbol();\n    var s2 = Symbol();\n    s1 === s2 // false\n\n    (2)Symbol函数可以接受一个字符串作为参数，表示对Symbol实例的描述，主要是为了标识和区分，对调式非常有用\n    // 有参数的情况\n    var s1 = Symbol(\"foo\");\n    var s2 = Symbol(\"foo\");\n    s1 === s2 // false\n\n    (3)Symbol值不能与其他类型的值进行运算\n3.用途\n    * 给对象创建私有属性\n    * 给现有的对象添加属性，可能会产生命名冲突，Symbol的出现解决这个问题\n    var attr = Symbol();\n\n    // 第一种写法,不用加引号\n    var a = {};\n    a[attr] = 'Nani';\n\n    // 第二种写法（注意加方括号，否则回被当作普通属性）\n    var a = {\n        [attr]: 'Nani';\n    };\n\n    // 以上写法都得到同样结果\n    a[attr] // \"Nani\"\n4.Symbol.for() 登记symbol,会先查找当前Symbol是否存在\n    // 存在：则引用，不存在：则创建登记\n    var s11 = Symbol.for('laoxie');//创建一个Symbol\n    var s12 = Symbol.for('laoxie');//引用一个Symbol\n    //注意：直接使用Symbol()创建的Symbol值的键不会被登记，所以也就获取不到\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);